#–†–∞–±–æ—á–∏–π –±–æ—Ç , –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.
# —Ç–µ—Å—Ç git
# 123
import logging
import os
import csv
import random
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
import asyncio
import platform
import aiosqlite
from datetime import datetime

from db import (
    init_db,
    upsert_user,
    is_admin,
    add_admin,
    log_upload,
    get_user_uploads_count,
    get_upload_log,
    get_upload_stats,
    get_all_users
)

if platform.system() == "Windows":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

UPLOADS_LOG_FILE = "uploads_log.csv"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

#LOCAL_API_URL = "http://localhost:8081"  # URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
TOKEN = "11111"  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
DELETE_STATE = 3
PAGE_SIZE = 5
DELETE_CONVERSATION_TIMEOUT = 300

DB_PATH = "bot_data.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            username TEXT,
            access TEXT,
            first_seen TEXT,
            last_seen TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS uploads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            user_name TEXT,
            username TEXT,
            file_name TEXT,
            file_type TEXT,
            timestamp TEXT
        )
        """)
        await db.commit()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PHOTO_ALBUM_LINK = "url" #–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º
MEDIA_FOLDER = "/–§–æ—Ç–æ"
ALLOWED_MIME_TYPES = {
    "image/jpeg": "jpg",
    "image/png": "png",
    "image/webp": "webp",
    "image/heic": "heic",
    "image/heif": "heif",
    "video/mp4": "mp4",
    "video/quicktime": "mov",
    "video/x-msvideo": "avi"
}


async def show_uploads_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥ –∑–∞–≥—Ä—É–∑–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    try:
        if not os.path.exists(UPLOADS_LOG_FILE):
            await update.message.reply_text("–õ–æ–≥ –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç.")
            return

        with open(UPLOADS_LOG_FILE, mode='r', encoding='utf-8') as f:
            reader = csv.reader(f)
            headers = next(reader)
            data = list(reader)

        if not data:
            await update.message.reply_text("–õ–æ–≥ –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç.")
            return

        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        total_uploads = len(data)

        # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        unique_users = len({row[0] for row in data})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {total_uploads}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–≥—Ä—É–∑–æ–∫:\n\n"
        )

        for row in data[-10:]:
            message += (
                f"üë§ {row[1]} (@{row[2]})\n"
                f"üìÅ {row[3]} ({row[4]})\n"
                f"üïí {row[5]}\n\n"
            )

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫")


def get_user_uploads_count(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        if not os.path.exists(UPLOADS_LOG_FILE):
            return 0

        with open(UPLOADS_LOG_FILE, mode='r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            return sum(1 for row in reader if int(row[0]) == user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
        return 0


async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        file_type = ""
        content_type = ""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if update.message.document:
            media = update.message.document
            mime_type = media.mime_type
            file_size = media.file_size
            original_name = media.file_name or f"document_{update.message.id}"
            file_type = "document"
            content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        elif update.message.video:
            media = update.message.video
            mime_type = media.mime_type
            file_size = media.file_size
            original_name = f"video_{update.message.id}"
            file_type = "video"
            content_type = "–≤–∏–¥–µ–æ"
        elif update.message.photo:
            media = update.message.photo[-1]
            mime_type = "image/jpeg"
            file_size = media.file_size
            original_name = f"photo_{update.message.id}"
            file_type = "photo"
            content_type = "—Ñ–æ—Ç–æ"
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
        if mime_type not in ALLOWED_MIME_TYPES:
            allowed_types = "\n".join([f"- {t}" for t in ALLOWED_MIME_TYPES.keys()])
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã:\n{allowed_types}"
            )
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ 50MB
        MAX_SIZE = 1000 * 1024 * 1024  # 50MB
        if file_size > MAX_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / 1024 / 1024:.1f} MB). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_SIZE / 1024 / 1024} MB"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        progress_message = await update.message.reply_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É {content_type} ({file_size / 1024 / 1024:.1f} MB)..."
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            file = await media.get_file(read_timeout=300)
        except Exception as e:
            logger.error(f"File access error: {e}")
            await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_ext = ALLOWED_MIME_TYPES.get(mime_type, "bin")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_part = f"_{user.username}" if user.username else f"_{user.id}"
        base_name = os.path.splitext(original_name)[0]
        file_name = f"{base_name}{username_part}.{file_ext}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = os.path.join(MEDIA_FOLDER, file_name)
        try:
            await file.download_to_drive(file_path)

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            log_upload(
                user_id=user.id,
                user_name=user.full_name,
                username=user.username,
                file_name=file_name,
                file_type=file_type
            )

            await progress_message.edit_text(
                f"‚úÖ {content_type.capitalize()} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                f"‚ñ∏ –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                f"‚ñ∏ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
                f"‚ñ∏ –ü—É—Ç—å: {file_path}"
            )

            await notify_admins_about_upload(
                context=context,
                user_name=user.full_name,
                username=user.username,
                file_name=file_name,
                file_type=content_type,
                file_size=file_size,
                update=update
            )

        except Exception as e:
            logger.error(f"File save error: {e}")
            await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return

    except Exception as e:
        logger.error(f"Unexpected error in handle_media: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


async def my_uploads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user = update.effective_user
    count = get_user_uploads_count(user.id)

    await update.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {count}"
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö


MESSAGE_STATE = 2

COMMANDS = {
    'menu': 'üìã –ú–µ–Ω—é',
    'help': '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
    'foto': 'üì∑ –§–æ—Ç–æ–∞–ª—å–±–æ–º',
    'my_uploads': 'üìä –ú–æ–∏ –∑–∞–≥—Ä—É–∑–∫–∏',
    'delete_files': 'üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ —Ñ–∞–π–ª—ã',
    'random': 'üé≤ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'message': 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç',
    'uploads_log': 'üìã –õ–æ–≥ –∑–∞–≥—Ä—É–∑–æ–∫',
    'address': 'üìç –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–≤–∞–¥—å–±—É'
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if user.id not in users:
        users[user.id] = {
            'name': user.full_name,
            'username': user.username,
            'access': 'admin' if user.id in await is_admin(update.effective_user.id) else 'user',
            'first_seen': now,
            'last_seen': now
        }
    else:
        users[user.id].update({
            'name': user.full_name,
            'username': user.username,
            'last_seen': now
        })
    

    keyboard = [
        [COMMANDS['help'], COMMANDS['foto']],
        [COMMANDS['my_uploads'], COMMANDS['delete_files']],[COMMANDS['address']]
    ]

    if user.id in await is_admin(update.effective_user.id):
        keyboard.append([COMMANDS['random'], COMMANDS['message']])
        keyboard.append([COMMANDS['uploads_log']])

    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

    await update.message.reply_text(
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
        f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {'üëë –ê–¥–º–∏–Ω' if user.id in await is_admin(update.effective_user.id) else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤–∏–¥–µ–æ —Å–æ —Å–≤–∞–¥—å–±—ã –†–∞–Ω–∏–ª—è –∏ –ì—É–ª–∏–Ω—ã.\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–µ–π –æ–± —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–º–æ—â—å¬ª –∏–ª–∏ /help.",
        reply_markup=reply_markup
    )
    await menu_command(update, context)


async def update_menu_for_all_users(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    current_users, _ = load_data()

    for user_id in current_users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üîÑ –ú–µ–Ω—é –±–æ—Ç–∞ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=create_main_menu_keyboard(user_id in await is_admin(update.effective_user.id))
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –¥–ª—è {user_id}: {e}")


def create_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [COMMANDS['help']],
        [COMMANDS['foto'], COMMANDS['my_uploads']],
        [COMMANDS['delete_files'], COMMANDS['address']]
    ]

    if is_admin:
        keyboard.extend([
            [COMMANDS['random'], COMMANDS['message']],
            [COMMANDS['uploads_log']]
        ])

    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.effective_user
    await update.message.reply_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu_keyboard(user.id in await is_admin(update.effective_user.id))
    )


async def force_update_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    await update_menu_for_all_users(context)
    await update.message.reply_text("‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")


async def handle_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ùì –ü–æ–º–æ—â—å:\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ - —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –∏ –∑–∞–≥—Ä—É–∂—É –≤ –§–æ—Ç–æ–∞–ª—å–±–æ–º\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, HEIC, WEBP, MP4, MOV, AVI\n"
        "‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: 20MB (2GB –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)\n\n"
        "üí¨ –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:\n\n"
        "üìã –ú–µ–Ω—é –±–æ—Ç–∞ /menu - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–æ–ø–∞–ª–æ.\n\n"
        f"üì∏ –§–æ—Ç–æ–∞–ª—å–±–æ–º /foto - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–ª—å–±–æ–º.\n\n"
        "üìä –ú–æ–∏ –ó–∞–≥—Ä—É–∑–∫–∏ /my_uploads - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
        "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ —Ñ–∞–π–ª—ã /delete_files - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤(–≤—ã–±–∏—Ä–∞—é—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É)\n\n"
        "üìç –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–≤–∞–¥—å–±—É /address - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –º–∞—Ä—à—Ä—É—Ç.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—à–∏–±–∫–∏ –ø–∏—Å–∞—Ç—å –≤ –õ–° @godlike0101"
    )
    await update.message.reply_text(help_text)



async def handle_address_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /address –∏ –∫–Ω–æ–ø–∫–∏ 'üìç –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–≤–∞–¥—å–±—É'"""
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    caption_text = """
    \nüè¢ –ê–¥—Ä–µ—Å: <b>–ë–∞–ª—Ç–∞—Å–∏, —É–ª–∏—Ü–∞ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤, 27</b>\n
    –ü—Ä–∏ –ø–æ–µ–∑–¥–∫–µ –∏–∑ <b>–ö–∞–∑–∞–Ω–∏</b> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã –º–æ–≥—É—Ç –ø–æ–≤–µ–∑—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–æ—Ö—É—é –¥–æ—Ä–æ–≥—É.
    –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ, –≤–∞—Å –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç, –ª–∏–±–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é.
    <a href="https://yandex.ru/maps?rtext=55.796127,49.106414~56.347024,50.223617~56.338845,50.183142&rtt=auto">–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –∏–∑ –ö–∞–∑–∞–Ω–∏ </a>
    <a href="https://yandex.ru/maps/-/CHc5RX3r">–¢–æ—á–∫–∞, –±–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∞</a>
    –ù—É–∂–Ω–æ –ø—Ä–æ–µ—Ö–∞—Ç—å —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä –ë–∞–ª—Ç–∞—Å–∏, –∫–∞–∫ –Ω–∞ <b>–ø–µ—Ä–≤–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ</b>.
    –í –∫–æ–Ω—Ü–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ, <b>–≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç</b>.
    """

    # –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
    photo_paths = [
        os.path.join("address_photo.jpg"),
        os.path.join("address_photo2.jpg"),
    ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    existing_photos = [p for p in photo_paths if os.path.exists(p)]

    if not existing_photos:
        await update.message.reply_text("–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üò¢\n\n" + caption_text, parse_mode="HTML")
        return

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    media_group = []

    # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é (caption)
    with open(existing_photos[0], 'rb') as photo_file:
        media_group.append(
            InputMediaPhoto(
                media=photo_file,
                caption=caption_text,
                parse_mode="HTML"
            )
        )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    for photo_path in existing_photos[1:]:
        with open(photo_path, 'rb') as photo_file:
            media_group.append(
                InputMediaPhoto(media=photo_file)
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await context.bot.send_media_group(
        chat_id=update.effective_chat.id,
        media=media_group
    )



async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    text = update.message.text
    user_id = update.effective_user.id

    if user_id not in await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    if text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return "WAIT_ADMIN_ID"

    elif text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤":
        admins_list = "\n".join([f"üëë {users.get(admin_id, {}).get('name', 'Unknown')} (ID: {admin_id})"
                                 for admin_id in await is_admin(update.effective_user.id)])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{admins_list}")

    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total_users = len(users)
        active_users = len([u for u in users.values() if
                            datetime.now() - datetime.strptime(u['last_seen'], "%Y-%m-%d %H:%M:%S") < timedelta(
                                days=7)])
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}"
        )

    elif text == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return ConversationHandler.END


async def handle_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        new_admin_id = int(update.message.text)
        await is_admin(update.effective_user.id).add(new_admin_id)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return "WAIT_ADMIN_ID"

    await admin_panel(update, context)
    return ConversationHandler.END

RANDOM_STATE = 1


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == COMMANDS['help'] or text == "/help":
        await handle_help_command(update, context)
        await update.message.reply_text(help_text)
    elif text == COMMANDS['address'] or text == "/address":
        await handle_address_command(update, context)
    elif text == COMMANDS['menu'] or text == "/menu":
        await menu_command(update, context)

    elif text == COMMANDS['foto']:
        await foto_command(update, context)

    elif text == COMMANDS['delete_files']:  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        return await delete_files_command(update, context)

    elif text == COMMANDS['random'] and user_id in await is_admin(update.effective_user.id):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return RANDOM_STATE

    elif text == COMMANDS['message'] and user_id in await is_admin(update.effective_user.id):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return MESSAGE_STATE

    elif text == COMMANDS['uploads_log'] and user_id in await is_admin(update.effective_user.id):  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await show_uploads_log(update, context)

    elif text == COMMANDS['my_uploads']:
        await my_uploads(update, context)

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")


async def handle_message_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await start(update, context)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ context.user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ broadcast_message
    context.user_data['broadcast_text'] = text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
    confirm_keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]],
        resize_keyboard=True
    )

    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{text}",
        reply_markup=confirm_keyboard
    )

    return MESSAGE_STATE + 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


async def handle_confirm_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /message —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        context.args = [context.user_data['broadcast_text']]
        await broadcast_message(update, context)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    await start(update, context)
    return ConversationHandler.END

async def handle_random_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await start(update, context)
        return ConversationHandler.END

    try:
        count = int(text)
        if count < 1:
            await update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return RANDOM_STATE

        # –í—ã–∑—ã–≤–∞–µ–º random_user —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
        context.args = [str(count)]  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        await random_user(update, context)

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return RANDOM_STATE

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)
    return ConversationHandler.END

async def random_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message:
            logger.error("Update.message is None!")
            return

        admin = update.effective_user
        if not admin:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return

        if admin.id not in await is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        try:
            count = int(context.args[0]) if context.args else 1
            if count < 1:
                await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
        except (IndexError, ValueError):
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /random [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_users, _ = load_data()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        regular_users = {
            uid: data for uid, data in current_users.items()
            if uid not in await is_admin(update.effective_user.id)  # –ù–µ –∞–¥–º–∏–Ω
               and str(uid) != str(admin.id)  # –ù–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
               and data.get('last_seen')  # –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        }

        if not regular_users:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if len(regular_users) < count:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ: {len(regular_users)}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {count})"
            )
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        admin_ids = {str(uid) for uid in await is_admin(update.effective_user.id)}
        regular_users_list = [
            (uid, data) for uid, data in regular_users.items()
            if str(uid) not in admin_ids and str(uid) != str(admin.id)
        ]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        selected = random.sample(regular_users_list, min(count, len(regular_users_list)))

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ["üé≤ –í—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"]
        success_count = 0

        for winner_id, winner_data in selected:
            try:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if str(winner_id) in {str(uid) for uid in await is_admin(update.effective_user.id)}:
                    logger.error(f"–°–±–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏! –í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω: {winner_id}")
                    continue

                await context.bot.send_message(
                    chat_id=winner_id,
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é {winner_data['name']}, –≤—ã –≤—ã–±—Ä–∞–Ω—ã!\n\n"

                )
                report.append(
                    f"‚úÖ {winner_data['name']} (ID: {winner_id}) "
                    f"@{winner_data.get('username', '–Ω–µ—Ç')} - —É–≤–µ–¥–æ–º–ª–µ–Ω"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {winner_id}: {e}")
                report.append(
                    f"‚ö†Ô∏è {winner_data['name']} (ID: {winner_id}) "
                    f"- –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        if update.message:
            await update.message.reply_text(
                "\n".join(report) +
                f"\n\n–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: {len(selected)}\n"
                f"–£—Å–ø–µ—à–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ: {success_count}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /random: {e}", exc_info=True)
        if update and update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")


async def foto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /foto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º"""
    await update.message.reply_text(
        text="üì∏ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì∑ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º", url=PHOTO_ALBUM_LINK)]
        ])
    )

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    try:
        new_admin_id = int(context.args[0])
        await is_admin(update.effective_user.id).add(new_admin_id)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        photo = await update.message.photo[-1].get_file()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_part = f"_{user.username}" if user.username else f"_{user.id}"
        file_name = f"photo_{update.message.id}{username_part}.jpg"

        file_path = os.path.join(MEDIA_FOLDER, file_name)
        await photo.download_to_drive(file_path)

        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É '{MEDIA_FOLDER}'!\n"
            f"–ò–º—è —Ñ–∞–π–ª–∞: {file_name}"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        log_upload(
            user_id=user.id,
            user_name=user.full_name,
            username=user.username,
            file_name=file_name,
            file_type="photo"
        )

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
        logger.error(f"Photo error: {e}")


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        video = update.message.video

        if video.file_size > 1000 * 1024 * 1024:  # 20MB –ª–∏–º–∏—Ç
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 20MB)")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_part = f"_{user.username}" if user.username else f"_{user.id}"
        file_name = f"video_{update.message.id}{username_part}.mp4"

        file_path = os.path.join(MEDIA_FOLDER, file_name)
        await (await video.get_file()).download_to_drive(file_path)

        await update.message.reply_text(
            f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É '{MEDIA_FOLDER}'!\n"
            f"–ò–º—è —Ñ–∞–π–ª–∞: {file_name}"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        log_upload(
            user_id=user.id,
            user_name=user.full_name,
            username=user.username,
            file_name=file_name,
            file_type="video"
        )

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
        logger.error(f"Video error: {e}")


async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if update.effective_user.id not in await is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not context.args:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /message [—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏]")
            return

        message_text = " ".join(context.args)
        current_users, _ = load_data()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        regular_users = {
            uid: data for uid, data in current_users.items()
            if uid not in await is_admin(update.effective_user.id)
        }

        if not regular_users:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            return

        success_count = 0
        failed_count = 0
        report = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id, user_data in regular_users.items():
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"{message_text}"
                )
                success_count += 1
                report.append(f"‚úÖ {user_data['name']} (ID: {user_id}) - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                failed_count += 1
                report.append(f"‚ö†Ô∏è {user_data['name']} (ID: {user_id}) - –æ—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = (
                f"üìä –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(regular_users)}\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n\n"
                f"–î–µ—Ç–∞–ª–∏:\n" + "\n".join(report[:20])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ
        )

        await update.message.reply_text(report_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")


async def notify_admins_about_upload(
        context: ContextTypes.DEFAULT_TYPE,
        user_name: str,
        username: str,
        file_name: str,
        file_type: str,
        file_size: int,
        update: Update
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    try:
        size_mb = file_size / (1024 * 1024)
        size_text = f"{size_mb:.1f} MB" if size_mb >= 1 else f"{file_size / 1024:.1f} KB"

        message_text = (
            "üì§ <b>–ù–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\n"
            f"üîπ <b>–õ–æ–≥–∏–Ω:</b> @{username if username else '–Ω–µ—Ç'}\n"
            f"üìÅ <b>–§–∞–π–ª:</b> {file_name}\n"
            f"üîß <b>–¢–∏–ø:</b> {file_type}\n"
            f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {size_text}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        for admin_id in await is_admin(update.effective_user.id):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.message.photo:
                    # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ
                    photo_file = await update.message.photo[-1].get_file()
                    await context.bot.send_photo(
                        chat_id=admin_id,
                        photo=photo_file.file_id,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                elif update.message.video:
                    # –í–∏–¥–µ–æ
                    video_file = await update.message.video.get_file()
                    await context.bot.send_video(
                        chat_id=admin_id,
                        video=video_file.file_id,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                elif update.message.document:
                    # –î–æ–∫—É–º–µ–Ω—Ç (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø)
                    doc = update.message.document
                    doc_file = await doc.get_file()

                    if doc.mime_type.startswith('image/'):
                        # –î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ)
                        await context.bot.send_photo(
                            chat_id=admin_id,
                            photo=doc_file.file_id,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                    elif doc.mime_type.startswith('video/'):
                        # –î–æ–∫—É–º–µ–Ω—Ç-–≤–∏–¥–µ–æ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ)
                        await context.bot.send_video(
                            chat_id=admin_id,
                            video=doc_file.file_id,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                    else:
                        # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)
                        await context.bot.send_document(
                            chat_id=admin_id,
                            document=doc_file.file_id,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                else:
                    # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message_text,
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_admins_about_upload: {e}")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        doc = update.message.document

        if doc.mime_type not in ALLOWED_MIME_TYPES:
            await update.message.reply_text("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (JPG/PNG/HEIC) –∏ –≤–∏–¥–µ–æ (MP4/MOV)!")
            return

        if doc.mime_type.startswith("video/") and doc.file_size > 1000 * 1024 * 1024 * 1024:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 2GB)")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if doc.mime_type.startswith("image/"):
            if doc.mime_type in ("image/heic", "image/heif"):
                file_ext = "heic"
            else:
                file_ext = doc.file_name.split(".")[-1].lower() if doc.file_name else "jpg"
            file_type = "—Ñ–æ—Ç–æ"
        else:
            file_ext = doc.file_name.split(".")[-1].lower() if doc.file_name else "mp4"
            file_type = "–≤–∏–¥–µ–æ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_part = f"_{user.username}" if user.username else f"_{user.id}"
        original_name = doc.file_name or f"{file_type}_doc_{update.message.id}"
        base_name = os.path.splitext(original_name)[0]
        file_name = f"{base_name}{username_part}.{file_ext}"

        file_path = os.path.join(MEDIA_FOLDER, file_name)
        await (await doc.get_file()).download_to_drive(file_path)

        await update.message.reply_text(
            f"‚úÖ {file_type.capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É '{MEDIA_FOLDER}'!\n"
            f"–ò–º—è —Ñ–∞–π–ª–∞: {file_name}"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        log_upload(
            user_id=user.id,
            user_name=user.full_name,
            username=user.username,
            file_name=file_name,
            file_type="document"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_upload(
            context=context,
            user_name=user.full_name,
            username=user.username,
            file_name=file_name,
            file_type=file_type,
            file_size=doc.file_size,
            update=update
        )

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        logger.error(f"Document error: {e}")


def get_user_files(user_id: int, username: str = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not os.path.exists(MEDIA_FOLDER):
            return []

        user_files = []
        for filename in os.listdir(MEDIA_FOLDER):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if f"_{user_id}." in filename or (username and f"_{username}." in filename):
                file_path = os.path.join(MEDIA_FOLDER, filename)
                user_files.append({
                    'name': filename,
                    'path': file_path,
                    'time': os.path.getmtime(file_path)
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        return sorted(user_files, key=lambda x: x['time'], reverse=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []


async def handle_page_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    query = update.callback_query
    await query.answer()

    current_page = context.user_data.get('current_page', 0)

    if query.data == "prev_page":
        new_page = current_page - 1
    else:
        new_page = current_page + 1

    return await send_files_page(update, context, new_page)


async def send_files_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"""
    # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫–∏) –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    await clean_messages(context, update.effective_chat.id)

    user_files = context.user_data.get('user_files', [])
    if not user_files:
        msg = await update.effective_message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        context.user_data['last_message_id'] = msg.message_id
        return ConversationHandler.END

    total_pages = (len(user_files) + PAGE_SIZE - 1) // PAGE_SIZE
    page = max(0, min(page, total_pages - 1))
    context.user_data['current_page'] = page
    start_idx = page * PAGE_SIZE
    page_files = user_files[start_idx:start_idx + PAGE_SIZE]

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–≤—å—é –∫–∞–∫ –æ–¥–Ω—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (–¥–æ 10 —Ñ–∞–π–ª–æ–≤)
    media_messages = []
    try:
        media_group = []
        for i, file_info in enumerate(page_files, 1):
            file_path = file_info['path']
            filename = os.path.basename(file_info['name'])

            with open(file_path, 'rb') as f:
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
                    media_group.append(InputMediaPhoto(
                        media=f,
                        caption=f"–§–∞–π–ª {start_idx + i}: {filename}"
                    ))
                else:
                    media_group.append(InputMediaDocument(
                        media=f,
                        caption=f"–§–∞–π–ª {start_idx + i}: {filename}"
                    ))

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —Ñ–∞–π–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
        for chunk in [media_group[i:i + 10] for i in range(0, len(media_group), 10)]:
            messages = await context.bot.send_media_group(
                chat_id=update.effective_chat.id,
                media=chunk
            )
            media_messages.extend(messages)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: {e}")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        keyboard = []
        for file_info in page_files:
            filename = os.path.basename(file_info['name'])
            keyboard.append([InlineKeyboardButton(
                f"üóë {filename[:20]}{'...' if len(filename) > 20 else ''}",
                callback_data=f"delete_{file_info['name']}"
            )])

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page"))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")])

        control_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['media_message_ids'] = [msg.message_id for msg in media_messages]
        context.user_data['last_message_id'] = control_message.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await clean_messages(context, update.effective_chat.id)
        return ConversationHandler.END

    return DELETE_STATE


async def delete_files_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    user = update.effective_user
    user_files = get_user_files(user.id, user.username)  # –ü–µ—Ä–µ–¥–∞–µ–º –∏ ID –∏ username

    if not user_files:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return ConversationHandler.END

    context.user_data['user_files'] = user_files
    context.user_data['current_page'] = 0

    return await send_files_page(update, context)


async def handle_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    query = update.callback_query
    await query.answer()

    filename = query.data.replace("delete_", "", 1)
    filepath = os.path.join(MEDIA_FOLDER, filename)

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(filepath):
            os.remove(filepath)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        context.user_data['user_files'] = [f for f in context.user_data['user_files'] if f['name'] != filename]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
        if not context.user_data['user_files']:
            await clean_messages(context, query.message.chat.id)
            await query.message.reply_text("‚úÖ –§–∞–π–ª—ã —É–¥–∞–ª—ë–Ω—ã! –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
            return ConversationHandler.END

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = context.user_data.get('current_page', 0)
        return await send_files_page(update, context, current_page)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!")
        return DELETE_STATE

async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("delete_"):
        return await delete_file(update, context)
    elif query.data in ["prev_page", "next_page"]:
        return await handle_page_navigation(update, context)
    elif query.data == "cancel_delete":
        await clean_messages(context, query.message.chat_id)
        await query.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    return DELETE_STATE


async def clean_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–≤—å—é) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids = []
        if 'media_message_ids' in context.user_data:
            message_ids.extend(context.user_data['media_message_ids'])
        if 'last_message_id' in context.user_data:
            message_ids.append(context.user_data['last_message_id'])

        if not message_ids:
            return

        logger.debug(f"–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è
        tasks = []
        for msg_id in message_ids:
            task = asyncio.create_task(
                safe_delete_message(context.bot, chat_id, msg_id),
                name=f"delete_msg_{msg_id}"
            )
            tasks.append(task)

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        done, pending = await asyncio.wait(tasks, timeout=3.0)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.debug(f"–£–¥–∞–ª–µ–Ω–æ {len(done)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(pending)} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        context.user_data.pop('media_message_ids', None)
        context.user_data.pop('last_message_id', None)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ clean_messages: {e}")


async def safe_delete_message(bot, chat_id, message_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except telegram.error.BadRequest as e:
        if "message to delete not found" not in str(e):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return False


async def cancel_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    await clean_messages(context, query.message.chat.id)
    await query.message.reply_text("üóë –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


def create_media_group(files: list, start_idx: int) -> list:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    media_group = []
    for i, file_info in enumerate(files, 1):
        file_path = file_info['path']
        filename = os.path.basename(file_info['name'])

        with open(file_path, 'rb') as f:
            if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
                media_group.append(InputMediaPhoto(
                    media=f,
                    caption=f"–§–∞–π–ª {start_idx + i}: {filename}"
                ))
            elif filename.lower().endswith(('.mp4', '.mov', '.avi')):
                media_group.append(InputMediaVideo(
                    media=f,
                    caption=f"–§–∞–π–ª {start_idx + i}: {filename}"
                ))
            else:
                media_group.append(InputMediaDocument(
                    media=f,
                    caption=f"–§–∞–π–ª {start_idx + i}: {filename}"
                ))
    return media_group


def create_keyboard(files: list, current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏"""
    buttons = []
    for file_info in files:
        filename = os.path.basename(file_info['name'])
        buttons.append([
            InlineKeyboardButton(
                f"üóë {filename[:15]}{'...' if len(filename) > 15 else ''}",
                callback_data=f"delete_{file_info['name']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page"))

    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")])

    return InlineKeyboardMarkup(buttons)


async def delete_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    query = update.callback_query
    filename = query.data[7:]

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        filepath = os.path.join(MEDIA_FOLDER, filename)
        if os.path.exists(filepath):
            os.remove(filepath)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        context.user_data['user_files'] = [f for f in context.user_data['user_files'] if f['name'] != filename]

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        if not context.user_data['user_files']:
            await clean_messages(context, query.message.chat_id)
            await query.message.reply_text("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω! –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = context.user_data.get('current_page', 0)
        return await send_files_page(update, context, current_page)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!")
        return DELETE_STATE

from db import init_db
import asyncio

async def main():
    asyncio.run(init_db())
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
    application = (
        Application.builder()
        .token(TOKEN)
#        .base_url(f"{LOCAL_API_URL}/bot")
        .connect_timeout(30)  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        .read_timeout(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        .write_timeout(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        .build()
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    delete_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.TEXT & filters.Regex(f"^{COMMANDS['delete_files']}$"),
                delete_files_command
            )
        ],
        states={
            DELETE_STATE: [
                CallbackQueryHandler(handle_delete, pattern="^delete_"),
                CallbackQueryHandler(handle_page_navigation, pattern="^(prev_page|next_page)$"),
                CallbackQueryHandler(cancel_delete, pattern="^cancel_delete$")
            ]
        },
        fallbacks=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∏—Ç—å|–ù–∞–∑–∞–¥)$"), start)
        ],
        per_message=False,
        per_chat=True,
        per_user=True,
        conversation_timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    )

    application.add_handler(delete_conv_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            RANDOM_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_random_state)],
            MESSAGE_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_state)],
            "WAIT_ADMIN_ID": [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_admin)],
            MESSAGE_STATE + 1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirm_state)]
        },
        fallbacks=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å$"), start),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), start)
        ]
    )

    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("random", random_user))
    application.add_handler(CommandHandler("add_admin", add_admin))
    application.add_handler(CommandHandler("message", broadcast_message))
    application.add_handler(CommandHandler("foto", foto_command))
    application.add_handler(CommandHandler("uploads_log", show_uploads_log))
    application.add_handler(CommandHandler("my_uploads", my_uploads))
    application.add_handler(CommandHandler("help", handle_help_command))
    application.add_handler(CommandHandler("delete_files", delete_files_command))
    application.add_handler(CommandHandler("address", handle_address_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("force_update_menu", force_update_menu))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))


    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
